"""add tables: subjects and measure_infos

Revision ID: 7479dd85b6bd
Revises: a8b7fbd0366c
Create Date: 2022-12-12 06:17:09.322251

"""
import sqlalchemy as sa
import sqlmodel
from alembic import op

# revision identifiers, used by Alembic.
revision = "7479dd85b6bd"
down_revision = "a8b7fbd0366c"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "subjects",
        sa.Column("sid", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=128), nullable=True),
        sa.Column("birth_date", sa.Date(), nullable=True),
        sa.Column("sex", sa.Integer(), nullable=True),
        sa.Column("memo", sqlmodel.sql.sqltypes.AutoString(length=1024), nullable=True),
        sa.Column("standard_measure_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        # sa.ForeignKeyConstraint(
        #     ["standard_measure_id"],
        #     ["app.measure_infos.id"],
        #     name=op.f("subjects_standard_measure_id_measure_infos_fkey"),
        # ),
        sa.PrimaryKeyConstraint("id", name=op.f("subjects_pkey")),
        schema="app",
    )
    op.create_index(
        op.f("app_subjects_birth_date_idx"),
        "subjects",
        ["birth_date"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_subjects_created_at_idx"),
        "subjects",
        ["created_at"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_subjects_id_idx"),
        "subjects",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_subjects_is_active_idx"),
        "subjects",
        ["is_active"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_subjects_memo_idx"),
        "subjects",
        ["memo"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_subjects_name_idx"),
        "subjects",
        ["name"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_subjects_sex_idx"),
        "subjects",
        ["sex"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_subjects_sid_idx"),
        "subjects",
        ["sid"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_subjects_updated_at_idx"),
        "subjects",
        ["updated_at"],
        unique=False,
        schema="app",
    )
    op.create_table(
        "measure_infos",
        sa.Column("subject_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("file_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("uid", sqlmodel.sql.sqltypes.AutoString(length=128), nullable=True),
        sa.Column(
            "number",
            sqlmodel.sql.sqltypes.AutoString(length=128),
            nullable=True,
        ),
        sa.Column("measure", sa.Integer(), nullable=True),
        sa.Column("bcq", sa.Boolean(), nullable=True),
        sa.Column("tongue", sa.Boolean(), nullable=True),
        sa.Column("measure_time", sa.DateTime(), nullable=True),
        sa.Column(
            "measure_operator",
            sqlmodel.sql.sqltypes.AutoString(length=128),
            nullable=True,
        ),
        sa.Column("select_index_l_cu", sa.Integer(), nullable=True),
        sa.Column("range_length_l_cu", sa.Float(), nullable=True),
        sa.Column("max_empt_index_l_cu", sa.Integer(), nullable=True),
        sa.Column("max_empt_value_l_cu", sa.Float(), nullable=True),
        sa.Column("irregular_hr_l_cu", sa.Boolean(), nullable=True),
        sa.Column("select_index_l_qu", sa.Integer(), nullable=True),
        sa.Column("range_length_l_qu", sa.Float(), nullable=True),
        sa.Column("max_empt_index_l_qu", sa.Integer(), nullable=True),
        sa.Column("max_empt_value_l_qu", sa.Float(), nullable=True),
        sa.Column("irregular_hr_l_qu", sa.Boolean(), nullable=True),
        sa.Column("select_index_l_ch", sa.Integer(), nullable=True),
        sa.Column("range_length_l_ch", sa.Float(), nullable=True),
        sa.Column("max_empt_index_l_ch", sa.Integer(), nullable=True),
        sa.Column("max_empt_value_l_ch", sa.Float(), nullable=True),
        sa.Column("irregular_hr_l_ch", sa.Boolean(), nullable=True),
        sa.Column("select_index_r_cu", sa.Integer(), nullable=True),
        sa.Column("range_length_r_cu", sa.Float(), nullable=True),
        sa.Column("max_empt_index_r_cu", sa.Integer(), nullable=True),
        sa.Column("max_empt_value_r_cu", sa.Float(), nullable=True),
        sa.Column("irregular_hr_r_cu", sa.Boolean(), nullable=True),
        sa.Column("select_index_r_qu", sa.Integer(), nullable=True),
        sa.Column("range_length_r_qu", sa.Float(), nullable=True),
        sa.Column("max_empt_index_r_qu", sa.Integer(), nullable=True),
        sa.Column("max_empt_value_r_qu", sa.Float(), nullable=True),
        sa.Column("irregular_hr_r_qu", sa.Boolean(), nullable=True),
        sa.Column("select_index_r_ch", sa.Integer(), nullable=True),
        sa.Column("range_length_r_ch", sa.Float(), nullable=True),
        sa.Column("max_empt_index_r_ch", sa.Integer(), nullable=True),
        sa.Column("max_empt_value_r_ch", sa.Float(), nullable=True),
        sa.Column("irregular_hr_r_ch", sa.Boolean(), nullable=True),
        sa.Column("sex", sa.Integer(), nullable=True),
        sa.Column("height", sa.Integer(), nullable=True),
        sa.Column("weight", sa.Integer(), nullable=True),
        sa.Column("sbp", sa.Integer(), nullable=True),
        sa.Column("dbp", sa.Integer(), nullable=True),
        sa.Column("judge_time", sa.DateTime(), nullable=True),
        sa.Column(
            "judge_dr",
            sqlmodel.sql.sqltypes.AutoString(length=128),
            nullable=True,
        ),
        sa.Column("hr_l", sa.Integer(), nullable=True),
        sa.Column("hr_r", sa.Integer(), nullable=True),
        sa.Column("select_static_l_cu", sa.Integer(), nullable=True),
        sa.Column("select_static_l_qu", sa.Integer(), nullable=True),
        sa.Column("select_static_l_ch", sa.Integer(), nullable=True),
        sa.Column("select_static_r_cu", sa.Integer(), nullable=True),
        sa.Column("select_static_r_qu", sa.Integer(), nullable=True),
        sa.Column("select_static_r_ch", sa.Integer(), nullable=True),
        sa.Column("depth_l_cu", sa.Integer(), nullable=True),
        sa.Column("depth_l_qu", sa.Integer(), nullable=True),
        sa.Column("depth_l_ch", sa.Integer(), nullable=True),
        sa.Column("depth_r_cu", sa.Integer(), nullable=True),
        sa.Column("depth_r_qu", sa.Integer(), nullable=True),
        sa.Column("depth_r_ch", sa.Integer(), nullable=True),
        sa.Column("strength_l_cu", sa.Integer(), nullable=True),
        sa.Column("strength_l_qu", sa.Integer(), nullable=True),
        sa.Column("strength_l_ch", sa.Integer(), nullable=True),
        sa.Column("strength_r_cu", sa.Integer(), nullable=True),
        sa.Column("strength_r_qu", sa.Integer(), nullable=True),
        sa.Column("strength_r_ch", sa.Integer(), nullable=True),
        sa.Column(
            "special_L",
            sqlmodel.sql.sqltypes.AutoString(length=10),
            nullable=True,
        ),
        sa.Column(
            "special_R",
            sqlmodel.sql.sqltypes.AutoString(length=10),
            nullable=True,
        ),
        sa.Column(
            "comment",
            sqlmodel.sql.sqltypes.AutoString(length=1024),
            nullable=True,
        ),
        sa.Column(
            "memo",
            sqlmodel.sql.sqltypes.AutoString(length=1024),
            nullable=True,
        ),
        sa.Column("bmi", sa.Float(), nullable=True),
        sa.Column("irregular_hr", sa.Integer(), nullable=True),
        sa.Column("proj_num", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["file_id"],
            ["app.upload_files.id"],
            name=op.f("measure_infos_file_id_upload_files_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["subject_id"],
            ["app.subjects.id"],
            name=op.f("measure_infos_subject_id_subjects_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("measure_infos_pkey")),
        schema="app",
    )
    op.create_index(
        op.f("app_measure_infos_bcq_idx"),
        "measure_infos",
        ["bcq"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_measure_infos_bmi_idx"),
        "measure_infos",
        ["bmi"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_measure_infos_created_at_idx"),
        "measure_infos",
        ["created_at"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_measure_infos_file_id_idx"),
        "measure_infos",
        ["file_id"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_measure_infos_id_idx"),
        "measure_infos",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_measure_infos_irregular_hr_idx"),
        "measure_infos",
        ["irregular_hr"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_measure_infos_is_active_idx"),
        "measure_infos",
        ["is_active"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_measure_infos_measure_operator_idx"),
        "measure_infos",
        ["measure_operator"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_measure_infos_measure_time_idx"),
        "measure_infos",
        ["measure_time"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_measure_infos_proj_num_idx"),
        "measure_infos",
        ["proj_num"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_measure_infos_subject_id_idx"),
        "measure_infos",
        ["subject_id"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_measure_infos_updated_at_idx"),
        "measure_infos",
        ["updated_at"],
        unique=False,
        schema="app",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("app_measure_infos_updated_at_idx"),
        table_name="measure_infos",
        schema="app",
    )
    op.drop_index(
        op.f("app_measure_infos_subject_id_idx"),
        table_name="measure_infos",
        schema="app",
    )
    op.drop_index(
        op.f("app_measure_infos_proj_num_idx"),
        table_name="measure_infos",
        schema="app",
    )
    op.drop_index(
        op.f("app_measure_infos_measure_time_idx"),
        table_name="measure_infos",
        schema="app",
    )
    op.drop_index(
        op.f("app_measure_infos_measure_operator_idx"),
        table_name="measure_infos",
        schema="app",
    )
    op.drop_index(
        op.f("app_measure_infos_is_active_idx"),
        table_name="measure_infos",
        schema="app",
    )
    op.drop_index(
        op.f("app_measure_infos_irregular_hr_idx"),
        table_name="measure_infos",
        schema="app",
    )
    op.drop_index(
        op.f("app_measure_infos_id_idx"),
        table_name="measure_infos",
        schema="app",
    )
    op.drop_index(
        op.f("app_measure_infos_file_id_idx"),
        table_name="measure_infos",
        schema="app",
    )
    op.drop_index(
        op.f("app_measure_infos_created_at_idx"),
        table_name="measure_infos",
        schema="app",
    )
    op.drop_index(
        op.f("app_measure_infos_bmi_idx"),
        table_name="measure_infos",
        schema="app",
    )
    op.drop_index(
        op.f("app_measure_infos_bcq_idx"),
        table_name="measure_infos",
        schema="app",
    )
    op.drop_table("measure_infos", schema="app")
    op.drop_index(
        op.f("app_subjects_updated_at_idx"),
        table_name="subjects",
        schema="app",
    )
    op.drop_index(op.f("app_subjects_sid_idx"), table_name="subjects", schema="app")
    op.drop_index(op.f("app_subjects_sex_idx"), table_name="subjects", schema="app")
    op.drop_index(op.f("app_subjects_name_idx"), table_name="subjects", schema="app")
    op.drop_index(op.f("app_subjects_memo_idx"), table_name="subjects", schema="app")
    op.drop_index(
        op.f("app_subjects_is_active_idx"),
        table_name="subjects",
        schema="app",
    )
    op.drop_index(op.f("app_subjects_id_idx"), table_name="subjects", schema="app")
    op.drop_index(
        op.f("app_subjects_created_at_idx"),
        table_name="subjects",
        schema="app",
    )
    op.drop_index(
        op.f("app_subjects_birth_date_idx"),
        table_name="subjects",
        schema="app",
    )
    op.drop_table("subjects", schema="app")
    # ### end Alembic commands ###
