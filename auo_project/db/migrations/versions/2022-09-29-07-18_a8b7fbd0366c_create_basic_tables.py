"""Create basic tables

Revision ID: a8b7fbd0366c
Revises: df0814c4e01c
Create Date: 2022-09-29 07:18:24.846384

"""
import sqlalchemy as sa
import sqlmodel
from alembic import op

# revision identifiers, used by Alembic.
revision = "a8b7fbd0366c"
down_revision = "df0814c4e01c"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "auth_actions",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
        sa.Column(
            "description",
            sqlmodel.sql.sqltypes.AutoString(length=128),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("auth_actions_pkey")),
        schema="app",
    )
    op.create_index(
        op.f("app_auth_actions_created_at_idx"),
        "auth_actions",
        ["created_at"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_actions_id_idx"),
        "auth_actions",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_actions_name_idx"),
        "auth_actions",
        ["name"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_actions_updated_at_idx"),
        "auth_actions",
        ["updated_at"],
        unique=False,
        schema="app",
    )
    op.create_table(
        "auth_groups",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
        sa.Column(
            "description",
            sqlmodel.sql.sqltypes.AutoString(length=128),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("auth_groups_pkey")),
        schema="app",
    )
    op.create_index(
        op.f("app_auth_groups_created_at_idx"),
        "auth_groups",
        ["created_at"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_groups_id_idx"),
        "auth_groups",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_groups_name_idx"),
        "auth_groups",
        ["name"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_groups_updated_at_idx"),
        "auth_groups",
        ["updated_at"],
        unique=False,
        schema="app",
    )
    op.create_table(
        "auth_orgs",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
        sa.Column(
            "description",
            sqlmodel.sql.sqltypes.AutoString(length=128),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("auth_orgs_pkey")),
        schema="app",
    )
    op.create_index(
        op.f("app_auth_orgs_created_at_idx"),
        "auth_orgs",
        ["created_at"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_orgs_id_idx"),
        "auth_orgs",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_orgs_name_idx"),
        "auth_orgs",
        ["name"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_orgs_updated_at_idx"),
        "auth_orgs",
        ["updated_at"],
        unique=False,
        schema="app",
    )
    op.create_table(
        "auth_roles",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
        sa.Column(
            "description",
            sqlmodel.sql.sqltypes.AutoString(length=128),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("auth_roles_pkey")),
        schema="app",
    )
    op.create_index(
        op.f("app_auth_roles_created_at_idx"),
        "auth_roles",
        ["created_at"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_roles_id_idx"),
        "auth_roles",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_roles_name_idx"),
        "auth_roles",
        ["name"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_roles_updated_at_idx"),
        "auth_roles",
        ["updated_at"],
        unique=False,
        schema="app",
    )
    op.create_table(
        "subscriptions",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
        sa.Column(
            "description",
            sqlmodel.sql.sqltypes.AutoString(length=128),
            nullable=False,
        ),
        sa.Column("start_from", sa.DateTime(), nullable=True),
        sa.Column("end_to", sa.DateTime(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("subscriptions_pkey")),
        schema="app",
    )
    op.create_index(
        op.f("app_subscriptions_created_at_idx"),
        "subscriptions",
        ["created_at"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_subscriptions_id_idx"),
        "subscriptions",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_subscriptions_name_idx"),
        "subscriptions",
        ["name"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_subscriptions_updated_at_idx"),
        "subscriptions",
        ["updated_at"],
        unique=False,
        schema="app",
    )
    op.create_table(
        "auth_group_roles",
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("group_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("role_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["app.auth_groups.id"],
            name=op.f("auth_group_roles_group_id_auth_groups_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["app.auth_roles.id"],
            name=op.f("auth_group_roles_role_id_auth_roles_fkey"),
        ),
        sa.PrimaryKeyConstraint(
            "id",
            "group_id",
            "role_id",
            name=op.f("auth_group_roles_pkey"),
        ),
        schema="app",
    )
    op.create_index(
        op.f("app_auth_group_roles_id_idx"),
        "auth_group_roles",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_table(
        "auth_role_actions",
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("role_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("action_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["action_id"],
            ["app.auth_actions.id"],
            name=op.f("auth_role_actions_action_id_auth_actions_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["app.auth_roles.id"],
            name=op.f("auth_role_actions_role_id_auth_roles_fkey"),
        ),
        sa.PrimaryKeyConstraint(
            "id",
            "role_id",
            "action_id",
            name=op.f("auth_role_actions_pkey"),
        ),
        schema="app",
    )
    op.create_index(
        op.f("app_auth_role_actions_id_idx"),
        "auth_role_actions",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_table(
        "auth_users",
        sa.Column("email", sa.String(length=128), nullable=True),
        sa.Column("org_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("subscription_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column(
            "username",
            sqlmodel.sql.sqltypes.AutoString(length=64),
            nullable=False,
        ),
        sa.Column(
            "full_name",
            sqlmodel.sql.sqltypes.AutoString(length=64),
            nullable=False,
        ),
        sa.Column(
            "mobile",
            sqlmodel.sql.sqltypes.AutoString(length=64),
            nullable=False,
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_superuser", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "hashed_password",
            sqlmodel.sql.sqltypes.AutoString(length=100),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["org_id"],
            ["app.auth_orgs.id"],
            name=op.f("auth_users_org_id_auth_orgs_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["subscription_id"],
            ["app.subscriptions.id"],
            name=op.f("auth_users_subscription_id_subscriptions_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("auth_users_pkey")),
        schema="app",
    )
    op.create_index(
        op.f("app_auth_users_created_at_idx"),
        "auth_users",
        ["created_at"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_users_email_idx"),
        "auth_users",
        ["email"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_users_id_idx"),
        "auth_users",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_users_is_active_idx"),
        "auth_users",
        ["is_active"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_users_is_superuser_idx"),
        "auth_users",
        ["is_superuser"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_users_org_id_idx"),
        "auth_users",
        ["org_id"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_users_updated_at_idx"),
        "auth_users",
        ["updated_at"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_users_username_idx"),
        "auth_users",
        ["username"],
        unique=True,
        schema="app",
    )
    op.create_table(
        "auth_group_users",
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("group_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("user_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["app.auth_groups.id"],
            name=op.f("auth_group_users_group_id_auth_groups_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["app.auth_users.id"],
            name=op.f("auth_group_users_user_id_auth_users_fkey"),
        ),
        sa.PrimaryKeyConstraint(
            "id",
            "group_id",
            "user_id",
            name=op.f("auth_group_users_pkey"),
        ),
        schema="app",
    )
    op.create_index(
        op.f("app_auth_group_users_id_idx"),
        "auth_group_users",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_table(
        "auth_user_actions",
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("user_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("action_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["action_id"],
            ["app.auth_actions.id"],
            name=op.f("auth_user_actions_action_id_auth_actions_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["app.auth_users.id"],
            name=op.f("auth_user_actions_user_id_auth_users_fkey"),
        ),
        sa.PrimaryKeyConstraint(
            "id",
            "user_id",
            "action_id",
            name=op.f("auth_user_actions_pkey"),
        ),
        schema="app",
    )
    op.create_index(
        op.f("app_auth_user_actions_id_idx"),
        "auth_user_actions",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_table(
        "auth_user_roles",
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("user_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("role_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["app.auth_roles.id"],
            name=op.f("auth_user_roles_role_id_auth_roles_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["app.auth_users.id"],
            name=op.f("auth_user_roles_user_id_auth_users_fkey"),
        ),
        sa.PrimaryKeyConstraint(
            "id",
            "user_id",
            "role_id",
            name=op.f("auth_user_roles_pkey"),
        ),
        schema="app",
    )
    op.create_index(
        op.f("app_auth_user_roles_id_idx"),
        "auth_user_roles",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_table(
        "uploads",
        sa.Column("owner_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("upload_status", sa.Integer(), nullable=False),
        sa.Column("file_number", sa.Integer(), nullable=False),
        sa.Column("start_from", sa.DateTime(), nullable=False),
        sa.Column("end_to", sa.DateTime(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["app.auth_users.id"],
            name=op.f("uploads_owner_id_auth_users_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("uploads_pkey")),
        schema="app",
    )
    op.create_index(
        op.f("app_uploads_created_at_idx"),
        "uploads",
        ["created_at"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_uploads_end_to_idx"),
        "uploads",
        ["end_to"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_uploads_id_idx"),
        "uploads",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_uploads_owner_id_idx"),
        "uploads",
        ["owner_id"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_uploads_start_from_idx"),
        "uploads",
        ["start_from"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_uploads_updated_at_idx"),
        "uploads",
        ["updated_at"],
        unique=False,
        schema="app",
    )
    op.create_table(
        "upload_files",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=128), nullable=False),
        sa.Column("owner_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("upload_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("file_status", sa.Integer(), nullable=False),
        sa.Column("size", sa.FLOAT(), nullable=False),
        sa.Column(
            "location",
            sqlmodel.sql.sqltypes.AutoString(length=128),
            nullable=False,
        ),
        sa.Column("is_dup", sa.Boolean(), nullable=False),
        sa.Column("is_valid", sa.Boolean(), nullable=False),
        sa.Column("memo", sqlmodel.sql.sqltypes.AutoString(length=128), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["app.auth_users.id"],
            name=op.f("upload_files_owner_id_auth_users_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["upload_id"],
            ["app.uploads.id"],
            name=op.f("upload_files_upload_id_uploads_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("upload_files_pkey")),
        sa.UniqueConstraint(
            "upload_id",
            "name",
            name=op.f("upload_files_upload_id_key"),
        ),
        schema="app",
    )
    op.create_index(
        op.f("app_upload_files_created_at_idx"),
        "upload_files",
        ["created_at"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_upload_files_id_idx"),
        "upload_files",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_upload_files_location_idx"),
        "upload_files",
        ["location"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_upload_files_name_idx"),
        "upload_files",
        ["name"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_upload_files_owner_id_idx"),
        "upload_files",
        ["owner_id"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_upload_files_updated_at_idx"),
        "upload_files",
        ["updated_at"],
        unique=False,
        schema="app",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("app_upload_files_updated_at_idx"),
        table_name="upload_files",
        schema="app",
    )
    op.drop_index(
        op.f("app_upload_files_owner_id_idx"),
        table_name="upload_files",
        schema="app",
    )
    op.drop_index(
        op.f("app_upload_files_name_idx"),
        table_name="upload_files",
        schema="app",
    )
    op.drop_index(
        op.f("app_upload_files_location_idx"),
        table_name="upload_files",
        schema="app",
    )
    op.drop_index(
        op.f("app_upload_files_id_idx"),
        table_name="upload_files",
        schema="app",
    )
    op.drop_index(
        op.f("app_upload_files_created_at_idx"),
        table_name="upload_files",
        schema="app",
    )
    op.drop_table("upload_files", schema="app")
    op.drop_index(
        op.f("app_uploads_updated_at_idx"),
        table_name="uploads",
        schema="app",
    )
    op.drop_index(
        op.f("app_uploads_start_from_idx"),
        table_name="uploads",
        schema="app",
    )
    op.drop_index(op.f("app_uploads_owner_id_idx"), table_name="uploads", schema="app")
    op.drop_index(op.f("app_uploads_id_idx"), table_name="uploads", schema="app")
    op.drop_index(op.f("app_uploads_end_to_idx"), table_name="uploads", schema="app")
    op.drop_index(
        op.f("app_uploads_created_at_idx"),
        table_name="uploads",
        schema="app",
    )
    op.drop_table("uploads", schema="app")
    op.drop_index(
        op.f("app_auth_user_roles_id_idx"),
        table_name="auth_user_roles",
        schema="app",
    )
    op.drop_table("auth_user_roles", schema="app")
    op.drop_index(
        op.f("app_auth_user_actions_id_idx"),
        table_name="auth_user_actions",
        schema="app",
    )
    op.drop_table("auth_user_actions", schema="app")
    op.drop_index(
        op.f("app_auth_group_users_id_idx"),
        table_name="auth_group_users",
        schema="app",
    )
    op.drop_table("auth_group_users", schema="app")
    op.drop_index(
        op.f("app_auth_users_username_idx"),
        table_name="auth_users",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_users_updated_at_idx"),
        table_name="auth_users",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_users_org_id_idx"),
        table_name="auth_users",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_users_is_superuser_idx"),
        table_name="auth_users",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_users_is_active_idx"),
        table_name="auth_users",
        schema="app",
    )
    op.drop_index(op.f("app_auth_users_id_idx"), table_name="auth_users", schema="app")
    op.drop_index(
        op.f("app_auth_users_email_idx"),
        table_name="auth_users",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_users_created_at_idx"),
        table_name="auth_users",
        schema="app",
    )
    op.drop_table("auth_users", schema="app")
    op.drop_index(
        op.f("app_auth_role_actions_id_idx"),
        table_name="auth_role_actions",
        schema="app",
    )
    op.drop_table("auth_role_actions", schema="app")
    op.drop_index(
        op.f("app_auth_group_roles_id_idx"),
        table_name="auth_group_roles",
        schema="app",
    )
    op.drop_table("auth_group_roles", schema="app")
    op.drop_index(
        op.f("app_subscriptions_updated_at_idx"),
        table_name="subscriptions",
        schema="app",
    )
    op.drop_index(
        op.f("app_subscriptions_name_idx"),
        table_name="subscriptions",
        schema="app",
    )
    op.drop_index(
        op.f("app_subscriptions_id_idx"),
        table_name="subscriptions",
        schema="app",
    )
    op.drop_index(
        op.f("app_subscriptions_created_at_idx"),
        table_name="subscriptions",
        schema="app",
    )
    op.drop_table("subscriptions", schema="app")
    op.drop_index(
        op.f("app_auth_roles_updated_at_idx"),
        table_name="auth_roles",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_roles_name_idx"),
        table_name="auth_roles",
        schema="app",
    )
    op.drop_index(op.f("app_auth_roles_id_idx"), table_name="auth_roles", schema="app")
    op.drop_index(
        op.f("app_auth_roles_created_at_idx"),
        table_name="auth_roles",
        schema="app",
    )
    op.drop_table("auth_roles", schema="app")
    op.drop_index(
        op.f("app_auth_orgs_updated_at_idx"),
        table_name="auth_orgs",
        schema="app",
    )
    op.drop_index(op.f("app_auth_orgs_name_idx"), table_name="auth_orgs", schema="app")
    op.drop_index(op.f("app_auth_orgs_id_idx"), table_name="auth_orgs", schema="app")
    op.drop_index(
        op.f("app_auth_orgs_created_at_idx"),
        table_name="auth_orgs",
        schema="app",
    )
    op.drop_table("auth_orgs", schema="app")
    op.drop_index(
        op.f("app_auth_groups_updated_at_idx"),
        table_name="auth_groups",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_groups_name_idx"),
        table_name="auth_groups",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_groups_id_idx"),
        table_name="auth_groups",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_groups_created_at_idx"),
        table_name="auth_groups",
        schema="app",
    )
    op.drop_table("auth_groups", schema="app")
    op.drop_index(
        op.f("app_auth_actions_updated_at_idx"),
        table_name="auth_actions",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_actions_name_idx"),
        table_name="auth_actions",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_actions_id_idx"),
        table_name="auth_actions",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_actions_created_at_idx"),
        table_name="auth_actions",
        schema="app",
    )
    op.drop_table("auth_actions", schema="app")
    # ### end Alembic commands ###
