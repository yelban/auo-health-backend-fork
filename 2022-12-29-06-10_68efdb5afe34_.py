"""empty message

Revision ID: 68efdb5afe34
Revises: 3b39fb75ef51
Create Date: 2022-12-29 06:10:30.376665

"""
import sqlalchemy as sa
import sqlmodel
from alembic import op

# revision identifiers, used by Alembic.
revision = "68efdb5afe34"
down_revision = "3b39fb75ef51"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "auth_actions",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
        sa.Column(
            "description",
            sqlmodel.sql.sqltypes.AutoString(length=128),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("auth_actions_pkey")),
        schema="app",
    )
    op.create_index(
        op.f("app_auth_actions_created_at_idx"),
        "auth_actions",
        ["created_at"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_actions_id_idx"),
        "auth_actions",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_actions_name_idx"),
        "auth_actions",
        ["name"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_actions_updated_at_idx"),
        "auth_actions",
        ["updated_at"],
        unique=False,
        schema="app",
    )
    op.create_table(
        "auth_groups",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
        sa.Column(
            "description",
            sqlmodel.sql.sqltypes.AutoString(length=128),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("auth_groups_pkey")),
        schema="app",
    )
    op.create_index(
        op.f("app_auth_groups_created_at_idx"),
        "auth_groups",
        ["created_at"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_groups_id_idx"),
        "auth_groups",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_groups_name_idx"),
        "auth_groups",
        ["name"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_groups_updated_at_idx"),
        "auth_groups",
        ["updated_at"],
        unique=False,
        schema="app",
    )
    op.create_table(
        "auth_orgs",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
        sa.Column(
            "description",
            sqlmodel.sql.sqltypes.AutoString(length=128),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("auth_orgs_pkey")),
        schema="app",
    )
    op.create_index(
        op.f("app_auth_orgs_created_at_idx"),
        "auth_orgs",
        ["created_at"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_orgs_id_idx"),
        "auth_orgs",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_orgs_name_idx"),
        "auth_orgs",
        ["name"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_orgs_updated_at_idx"),
        "auth_orgs",
        ["updated_at"],
        unique=False,
        schema="app",
    )
    op.create_table(
        "auth_roles",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
        sa.Column(
            "description",
            sqlmodel.sql.sqltypes.AutoString(length=128),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("auth_roles_pkey")),
        schema="app",
    )
    op.create_index(
        op.f("app_auth_roles_created_at_idx"),
        "auth_roles",
        ["created_at"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_roles_id_idx"),
        "auth_roles",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_roles_name_idx"),
        "auth_roles",
        ["name"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_roles_updated_at_idx"),
        "auth_roles",
        ["updated_at"],
        unique=False,
        schema="app",
    )
    op.create_table(
        "subscriptions",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
        sa.Column(
            "description",
            sqlmodel.sql.sqltypes.AutoString(length=128),
            nullable=False,
        ),
        sa.Column("start_from", sa.DateTime(), nullable=True),
        sa.Column("end_to", sa.DateTime(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("subscriptions_pkey")),
        schema="app",
    )
    op.create_index(
        op.f("app_subscriptions_created_at_idx"),
        "subscriptions",
        ["created_at"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_subscriptions_id_idx"),
        "subscriptions",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_subscriptions_name_idx"),
        "subscriptions",
        ["name"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_subscriptions_updated_at_idx"),
        "subscriptions",
        ["updated_at"],
        unique=False,
        schema="app",
    )
    op.create_table(
        "subjects",
        sa.Column("sid", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=128), nullable=True),
        sa.Column("birth_date", sa.Date(), nullable=True),
        sa.Column("sex", sa.Integer(), nullable=True),
        sa.Column("memo", sqlmodel.sql.sqltypes.AutoString(length=1024), nullable=True),
        sa.Column("standard_measure_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("subjects_pkey")),
        schema="measure",
    )
    op.create_index(
        op.f("measure_subjects_birth_date_idx"),
        "subjects",
        ["birth_date"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_subjects_created_at_idx"),
        "subjects",
        ["created_at"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_subjects_id_idx"),
        "subjects",
        ["id"],
        unique=True,
        schema="measure",
    )
    op.create_index(
        op.f("measure_subjects_is_active_idx"),
        "subjects",
        ["is_active"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_subjects_memo_idx"),
        "subjects",
        ["memo"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_subjects_name_idx"),
        "subjects",
        ["name"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_subjects_sex_idx"),
        "subjects",
        ["sex"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_subjects_sid_idx"),
        "subjects",
        ["sid"],
        unique=True,
        schema="measure",
    )
    op.create_index(
        op.f("measure_subjects_updated_at_idx"),
        "subjects",
        ["updated_at"],
        unique=False,
        schema="measure",
    )
    op.create_table(
        "auth_group_roles",
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("group_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("role_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["app.auth_groups.id"],
            name=op.f("auth_group_roles_group_id_auth_groups_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["app.auth_roles.id"],
            name=op.f("auth_group_roles_role_id_auth_roles_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("auth_group_roles_pkey")),
        sa.UniqueConstraint(
            "group_id",
            "role_id",
            name="auth_group_roles_user_id_role_id_key",
        ),
        schema="app",
    )
    op.create_index(
        op.f("app_auth_group_roles_group_id_idx"),
        "auth_group_roles",
        ["group_id"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_group_roles_id_idx"),
        "auth_group_roles",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_group_roles_role_id_idx"),
        "auth_group_roles",
        ["role_id"],
        unique=False,
        schema="app",
    )
    op.create_table(
        "auth_role_actions",
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("role_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("action_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["action_id"],
            ["app.auth_actions.id"],
            name=op.f("auth_role_actions_action_id_auth_actions_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["app.auth_roles.id"],
            name=op.f("auth_role_actions_role_id_auth_roles_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("auth_role_actions_pkey")),
        sa.UniqueConstraint(
            "role_id",
            "action_id",
            name="auth_role_actions_role_id_action_id_key",
        ),
        schema="app",
    )
    op.create_index(
        op.f("app_auth_role_actions_action_id_idx"),
        "auth_role_actions",
        ["action_id"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_role_actions_id_idx"),
        "auth_role_actions",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_role_actions_role_id_idx"),
        "auth_role_actions",
        ["role_id"],
        unique=False,
        schema="app",
    )
    op.create_table(
        "auth_users",
        sa.Column("email", sa.String(length=128), nullable=True),
        sa.Column("org_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("subscription_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column(
            "username",
            sqlmodel.sql.sqltypes.AutoString(length=64),
            nullable=False,
        ),
        sa.Column(
            "full_name",
            sqlmodel.sql.sqltypes.AutoString(length=64),
            nullable=False,
        ),
        sa.Column(
            "mobile",
            sqlmodel.sql.sqltypes.AutoString(length=64),
            nullable=False,
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_superuser", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "hashed_password",
            sqlmodel.sql.sqltypes.AutoString(length=100),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["org_id"],
            ["app.auth_orgs.id"],
            name=op.f("auth_users_org_id_auth_orgs_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["subscription_id"],
            ["app.subscriptions.id"],
            name=op.f("auth_users_subscription_id_subscriptions_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("auth_users_pkey")),
        schema="app",
    )
    op.create_index(
        op.f("app_auth_users_created_at_idx"),
        "auth_users",
        ["created_at"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_users_email_idx"),
        "auth_users",
        ["email"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_users_id_idx"),
        "auth_users",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_users_is_active_idx"),
        "auth_users",
        ["is_active"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_users_is_superuser_idx"),
        "auth_users",
        ["is_superuser"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_users_org_id_idx"),
        "auth_users",
        ["org_id"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_users_updated_at_idx"),
        "auth_users",
        ["updated_at"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_users_username_idx"),
        "auth_users",
        ["username"],
        unique=True,
        schema="app",
    )
    op.create_table(
        "auth_group_users",
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("group_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("user_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["app.auth_groups.id"],
            name=op.f("auth_group_users_group_id_auth_groups_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["app.auth_users.id"],
            name=op.f("auth_group_users_user_id_auth_users_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("auth_group_users_pkey")),
        sa.UniqueConstraint(
            "group_id",
            "user_id",
            name="auth_group_users_group_id_user_id_key",
        ),
        schema="app",
    )
    op.create_index(
        op.f("app_auth_group_users_group_id_idx"),
        "auth_group_users",
        ["group_id"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_group_users_id_idx"),
        "auth_group_users",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_group_users_user_id_idx"),
        "auth_group_users",
        ["user_id"],
        unique=False,
        schema="app",
    )
    op.create_table(
        "auth_user_actions",
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("user_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("action_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["action_id"],
            ["app.auth_actions.id"],
            name=op.f("auth_user_actions_action_id_auth_actions_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["app.auth_users.id"],
            name=op.f("auth_user_actions_user_id_auth_users_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("auth_user_actions_pkey")),
        sa.UniqueConstraint(
            "user_id",
            "action_id",
            name="auth_user_actions_user_id_action_id_key",
        ),
        schema="app",
    )
    op.create_index(
        op.f("app_auth_user_actions_action_id_idx"),
        "auth_user_actions",
        ["action_id"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_user_actions_id_idx"),
        "auth_user_actions",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_user_actions_user_id_idx"),
        "auth_user_actions",
        ["user_id"],
        unique=False,
        schema="app",
    )
    op.create_table(
        "auth_user_roles",
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("user_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("role_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["app.auth_roles.id"],
            name=op.f("auth_user_roles_role_id_auth_roles_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["app.auth_users.id"],
            name=op.f("auth_user_roles_user_id_auth_users_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("auth_user_roles_pkey")),
        sa.UniqueConstraint(
            "user_id",
            "role_id",
            name="auth_user_roles_user_id_role_id_key",
        ),
        schema="app",
    )
    op.create_index(
        op.f("app_auth_user_roles_id_idx"),
        "auth_user_roles",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_user_roles_role_id_idx"),
        "auth_user_roles",
        ["role_id"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_auth_user_roles_user_id_idx"),
        "auth_user_roles",
        ["user_id"],
        unique=False,
        schema="app",
    )
    op.create_table(
        "uploads",
        sa.Column("owner_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("upload_status", sa.Integer(), nullable=False),
        sa.Column("file_number", sa.Integer(), nullable=False),
        sa.Column("start_from", sa.DateTime(), nullable=False),
        sa.Column("end_to", sa.DateTime(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["app.auth_users.id"],
            name=op.f("uploads_owner_id_auth_users_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("uploads_pkey")),
        schema="app",
    )
    op.create_index(
        op.f("app_uploads_created_at_idx"),
        "uploads",
        ["created_at"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_uploads_end_to_idx"),
        "uploads",
        ["end_to"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_uploads_id_idx"),
        "uploads",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_uploads_owner_id_idx"),
        "uploads",
        ["owner_id"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_uploads_start_from_idx"),
        "uploads",
        ["start_from"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_uploads_updated_at_idx"),
        "uploads",
        ["updated_at"],
        unique=False,
        schema="app",
    )
    op.create_table(
        "upload_files",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=128), nullable=False),
        sa.Column("owner_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("upload_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("file_status", sa.Integer(), nullable=False),
        sa.Column("size", sa.Float(), nullable=False),
        sa.Column(
            "location",
            sqlmodel.sql.sqltypes.AutoString(length=128),
            nullable=False,
        ),
        sa.Column("is_dup", sa.Boolean(), nullable=False),
        sa.Column("is_valid", sa.Boolean(), nullable=False),
        sa.Column("memo", sqlmodel.sql.sqltypes.AutoString(length=128), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["app.auth_users.id"],
            name=op.f("upload_files_owner_id_auth_users_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["upload_id"],
            ["app.uploads.id"],
            name=op.f("upload_files_upload_id_uploads_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("upload_files_pkey")),
        sa.UniqueConstraint(
            "upload_id",
            "name",
            name=op.f("upload_files_upload_id_key"),
        ),
        schema="app",
    )
    op.create_index(
        op.f("app_upload_files_created_at_idx"),
        "upload_files",
        ["created_at"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_upload_files_id_idx"),
        "upload_files",
        ["id"],
        unique=True,
        schema="app",
    )
    op.create_index(
        op.f("app_upload_files_location_idx"),
        "upload_files",
        ["location"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_upload_files_name_idx"),
        "upload_files",
        ["name"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_upload_files_owner_id_idx"),
        "upload_files",
        ["owner_id"],
        unique=False,
        schema="app",
    )
    op.create_index(
        op.f("app_upload_files_updated_at_idx"),
        "upload_files",
        ["updated_at"],
        unique=False,
        schema="app",
    )
    op.create_table(
        "infos",
        sa.Column("subject_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("file_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("org_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("uid", sqlmodel.sql.sqltypes.AutoString(length=128), nullable=True),
        sa.Column(
            "number",
            sqlmodel.sql.sqltypes.AutoString(length=128),
            nullable=True,
        ),
        sa.Column("has_measure", sa.Integer(), nullable=True),
        sa.Column("has_bcq", sa.Boolean(), nullable=True),
        sa.Column("has_tongue", sa.Boolean(), nullable=True),
        sa.Column("has_memo", sa.Boolean(), nullable=True),
        sa.Column("has_low_pass_rate", sa.Boolean(), nullable=True),
        sa.Column("measure_time", sa.DateTime(), nullable=True),
        sa.Column(
            "measure_operator",
            sqlmodel.sql.sqltypes.AutoString(length=128),
            nullable=True,
        ),
        sa.Column("mean_prop_range_1_l_cu", sa.Float(), nullable=True),
        sa.Column("mean_prop_range_2_l_cu", sa.Float(), nullable=True),
        sa.Column("mean_prop_range_3_l_cu", sa.Float(), nullable=True),
        sa.Column("mean_prop_range_1_l_qu", sa.Float(), nullable=True),
        sa.Column("mean_prop_range_2_l_qu", sa.Float(), nullable=True),
        sa.Column("mean_prop_range_3_l_qu", sa.Float(), nullable=True),
        sa.Column("mean_prop_range_1_l_ch", sa.Float(), nullable=True),
        sa.Column("mean_prop_range_2_l_ch", sa.Float(), nullable=True),
        sa.Column("mean_prop_range_3_l_ch", sa.Float(), nullable=True),
        sa.Column("mean_prop_range_1_r_cu", sa.Float(), nullable=True),
        sa.Column("mean_prop_range_2_r_cu", sa.Float(), nullable=True),
        sa.Column("mean_prop_range_3_r_cu", sa.Float(), nullable=True),
        sa.Column("mean_prop_range_1_r_qu", sa.Float(), nullable=True),
        sa.Column("mean_prop_range_2_r_qu", sa.Float(), nullable=True),
        sa.Column("mean_prop_range_3_r_qu", sa.Float(), nullable=True),
        sa.Column("mean_prop_range_1_r_ch", sa.Float(), nullable=True),
        sa.Column("mean_prop_range_2_r_ch", sa.Float(), nullable=True),
        sa.Column("mean_prop_range_3_r_ch", sa.Float(), nullable=True),
        sa.Column("mean_prop_range_max_l_cu", sa.Integer(), nullable=True),
        sa.Column("mean_prop_range_max_l_qu", sa.Integer(), nullable=True),
        sa.Column("mean_prop_range_max_l_ch", sa.Integer(), nullable=True),
        sa.Column("mean_prop_range_max_r_cu", sa.Integer(), nullable=True),
        sa.Column("mean_prop_range_max_r_qu", sa.Integer(), nullable=True),
        sa.Column("mean_prop_range_max_r_ch", sa.Integer(), nullable=True),
        sa.Column("max_amp_depth_of_range_l_cu", sa.Integer(), nullable=True),
        sa.Column("max_amp_depth_of_range_l_qu", sa.Integer(), nullable=True),
        sa.Column("max_amp_depth_of_range_l_ch", sa.Integer(), nullable=True),
        sa.Column("max_amp_depth_of_range_r_cu", sa.Integer(), nullable=True),
        sa.Column("max_amp_depth_of_range_r_qu", sa.Integer(), nullable=True),
        sa.Column("max_amp_depth_of_range_r_ch", sa.Integer(), nullable=True),
        sa.Column("max_empt_value_l_cu", sa.Float(), nullable=True),
        sa.Column("max_empt_value_l_qu", sa.Float(), nullable=True),
        sa.Column("max_empt_value_l_ch", sa.Float(), nullable=True),
        sa.Column("max_empt_value_r_cu", sa.Float(), nullable=True),
        sa.Column("max_empt_value_r_qu", sa.Float(), nullable=True),
        sa.Column("max_empt_value_r_ch", sa.Float(), nullable=True),
        sa.Column("irregular_hr_l_cu", sa.Boolean(), nullable=True),
        sa.Column("irregular_hr_l_qu", sa.Boolean(), nullable=True),
        sa.Column("irregular_hr_l_ch", sa.Boolean(), nullable=True),
        sa.Column("irregular_hr_r_cu", sa.Boolean(), nullable=True),
        sa.Column("irregular_hr_r_qu", sa.Boolean(), nullable=True),
        sa.Column("irregular_hr_r_ch", sa.Boolean(), nullable=True),
        sa.Column("irregular_hr_l", sa.Integer(), nullable=True),
        sa.Column("irregular_hr_type_l", sa.Integer(), nullable=True),
        sa.Column("irregular_hr_r", sa.Integer(), nullable=True),
        sa.Column("irregular_hr_type_r", sa.Integer(), nullable=True),
        sa.Column("irregular_hr", sa.Integer(), nullable=True),
        sa.Column("max_slope_value_l_cu", sa.Float(), nullable=True),
        sa.Column("max_slope_value_l_qu", sa.Float(), nullable=True),
        sa.Column("max_slope_value_l_ch", sa.Float(), nullable=True),
        sa.Column("max_slope_value_r_cu", sa.Float(), nullable=True),
        sa.Column("max_slope_value_r_qu", sa.Float(), nullable=True),
        sa.Column("max_slope_value_r_ch", sa.Float(), nullable=True),
        sa.Column("strength_l_cu", sa.Integer(), nullable=True),
        sa.Column("strength_l_qu", sa.Integer(), nullable=True),
        sa.Column("strength_l_ch", sa.Integer(), nullable=True),
        sa.Column("strength_r_cu", sa.Integer(), nullable=True),
        sa.Column("strength_r_qu", sa.Integer(), nullable=True),
        sa.Column("strength_r_ch", sa.Integer(), nullable=True),
        sa.Column("width_l_cu", sa.Integer(), nullable=True),
        sa.Column("width_l_qu", sa.Integer(), nullable=True),
        sa.Column("width_l_ch", sa.Integer(), nullable=True),
        sa.Column("width_r_cu", sa.Integer(), nullable=True),
        sa.Column("width_r_qu", sa.Integer(), nullable=True),
        sa.Column("width_r_ch", sa.Integer(), nullable=True),
        sa.Column("sex", sa.Integer(), nullable=True),
        sa.Column("age", sa.Integer(), nullable=True),
        sa.Column("height", sa.Integer(), nullable=True),
        sa.Column("weight", sa.Integer(), nullable=True),
        sa.Column("bmi", sa.Float(), nullable=True),
        sa.Column("sbp", sa.Integer(), nullable=True),
        sa.Column("dbp", sa.Integer(), nullable=True),
        sa.Column("judge_time", sa.DateTime(), nullable=True),
        sa.Column(
            "judge_dr",
            sqlmodel.sql.sqltypes.AutoString(length=128),
            nullable=True,
        ),
        sa.Column("hr_l", sa.Integer(), nullable=True),
        sa.Column("hr_r", sa.Integer(), nullable=True),
        sa.Column(
            "special_l",
            sqlmodel.sql.sqltypes.AutoString(length=10),
            nullable=True,
        ),
        sa.Column(
            "special_r",
            sqlmodel.sql.sqltypes.AutoString(length=10),
            nullable=True,
        ),
        sa.Column(
            "comment",
            sqlmodel.sql.sqltypes.AutoString(length=1024),
            nullable=True,
        ),
        sa.Column("memo", sqlmodel.sql.sqltypes.AutoString(length=1024), nullable=True),
        sa.Column("proj_num", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["file_id"],
            ["app.upload_files.id"],
            name=op.f("infos_file_id_upload_files_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["org_id"],
            ["app.auth_orgs.id"],
            name=op.f("infos_org_id_auth_orgs_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["subject_id"],
            ["measure.subjects.id"],
            name=op.f("infos_subject_id_subjects_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("infos_pkey")),
        schema="measure",
    )
    op.create_index(
        op.f("measure_infos_bmi_idx"),
        "infos",
        ["bmi"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_infos_created_at_idx"),
        "infos",
        ["created_at"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_infos_file_id_idx"),
        "infos",
        ["file_id"],
        unique=True,
        schema="measure",
    )
    op.create_index(
        op.f("measure_infos_has_bcq_idx"),
        "infos",
        ["has_bcq"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_infos_has_low_pass_rate_idx"),
        "infos",
        ["has_low_pass_rate"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_infos_has_measure_idx"),
        "infos",
        ["has_measure"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_infos_has_memo_idx"),
        "infos",
        ["has_memo"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_infos_has_tongue_idx"),
        "infos",
        ["has_tongue"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_infos_id_idx"),
        "infos",
        ["id"],
        unique=True,
        schema="measure",
    )
    op.create_index(
        op.f("measure_infos_irregular_hr_idx"),
        "infos",
        ["irregular_hr"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_infos_is_active_idx"),
        "infos",
        ["is_active"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_infos_measure_operator_idx"),
        "infos",
        ["measure_operator"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_infos_measure_time_idx"),
        "infos",
        ["measure_time"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_infos_org_id_idx"),
        "infos",
        ["org_id"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_infos_proj_num_idx"),
        "infos",
        ["proj_num"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_infos_subject_id_idx"),
        "infos",
        ["subject_id"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_infos_updated_at_idx"),
        "infos",
        ["updated_at"],
        unique=False,
        schema="measure",
    )
    op.create_table(
        "bcqs",
        sa.Column("measure_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("score_yang", sa.Integer(), nullable=True),
        sa.Column("score_yin", sa.Integer(), nullable=True),
        sa.Column("score_phlegm", sa.Integer(), nullable=True),
        sa.Column("score_yang_head", sa.Integer(), nullable=True),
        sa.Column("score_yang_chest", sa.Integer(), nullable=True),
        sa.Column("score_yang_limbs", sa.Integer(), nullable=True),
        sa.Column("score_yang_abdomen", sa.Integer(), nullable=True),
        sa.Column("score_yang_surface", sa.Integer(), nullable=True),
        sa.Column("score_yin_head", sa.Integer(), nullable=True),
        sa.Column("score_yin_limbs", sa.Integer(), nullable=True),
        sa.Column("score_yin_gt", sa.Integer(), nullable=True),
        sa.Column("score_yin_surface", sa.Integer(), nullable=True),
        sa.Column("score_yin_abdomen", sa.Integer(), nullable=True),
        sa.Column("score_phlegm_trunk", sa.Integer(), nullable=True),
        sa.Column("score_phlegm_surface", sa.Integer(), nullable=True),
        sa.Column("score_phlegm_head", sa.Integer(), nullable=True),
        sa.Column("score_phlegm_gt", sa.Integer(), nullable=True),
        sa.Column("percentage_yang", sa.Integer(), nullable=True),
        sa.Column("percentage_yin", sa.Integer(), nullable=True),
        sa.Column("percentage_phlegm", sa.Integer(), nullable=True),
        sa.Column("percentage_yang_head", sa.Integer(), nullable=True),
        sa.Column("percentage_yang_chest", sa.Integer(), nullable=True),
        sa.Column("percentage_yang_limbs", sa.Integer(), nullable=True),
        sa.Column("percentage_yang_abdomen", sa.Integer(), nullable=True),
        sa.Column("percentage_yang_surface", sa.Integer(), nullable=True),
        sa.Column("percentage_yin_head", sa.Integer(), nullable=True),
        sa.Column("percentage_yin_limbs", sa.Integer(), nullable=True),
        sa.Column("percentage_yin_gt", sa.Integer(), nullable=True),
        sa.Column("percentage_yin_surface", sa.Integer(), nullable=True),
        sa.Column("percentage_yin_abdomen", sa.Integer(), nullable=True),
        sa.Column("percentage_phlegm_trunk", sa.Integer(), nullable=True),
        sa.Column("percentage_phlegm_surface", sa.Integer(), nullable=True),
        sa.Column("percentage_phlegm_head", sa.Integer(), nullable=True),
        sa.Column("percentage_phlegm_gt", sa.Integer(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["measure_id"],
            ["measure.infos.id"],
            name=op.f("bcqs_measure_id_infos_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("bcqs_pkey")),
        schema="measure",
    )
    op.create_index(
        op.f("measure_bcqs_created_at_idx"),
        "bcqs",
        ["created_at"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_bcqs_id_idx"),
        "bcqs",
        ["id"],
        unique=True,
        schema="measure",
    )
    op.create_index(
        op.f("measure_bcqs_measure_id_idx"),
        "bcqs",
        ["measure_id"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_bcqs_updated_at_idx"),
        "bcqs",
        ["updated_at"],
        unique=False,
        schema="measure",
    )
    op.create_table(
        "raw_data",
        sa.Column("measure_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("six_sec_l_cu", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("six_sec_l_qu", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("six_sec_l_ch", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("six_sec_r_cu", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("six_sec_r_qu", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("six_sec_r_ch", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "all_sec_analyze_raw_l_cu",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.Column(
            "all_sec_analyze_raw_l_qu",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.Column(
            "all_sec_analyze_raw_l_ch",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.Column(
            "all_sec_analyze_raw_r_cu",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.Column(
            "all_sec_analyze_raw_r_qu",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.Column(
            "all_sec_analyze_raw_r_ch",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["measure_id"],
            ["measure.infos.id"],
            name=op.f("raw_data_measure_id_infos_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("raw_data_pkey")),
        schema="measure",
    )
    op.create_index(
        op.f("measure_raw_data_created_at_idx"),
        "raw_data",
        ["created_at"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_raw_data_id_idx"),
        "raw_data",
        ["id"],
        unique=True,
        schema="measure",
    )
    op.create_index(
        op.f("measure_raw_data_measure_id_idx"),
        "raw_data",
        ["measure_id"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_raw_data_updated_at_idx"),
        "raw_data",
        ["updated_at"],
        unique=False,
        schema="measure",
    )
    op.create_table(
        "statistics",
        sa.Column("measure_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("statistic", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("hand", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("position", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("a0", sa.Float(), nullable=True),
        sa.Column("c1", sa.Float(), nullable=True),
        sa.Column("c2", sa.Float(), nullable=True),
        sa.Column("c3", sa.Float(), nullable=True),
        sa.Column("c4", sa.Float(), nullable=True),
        sa.Column("c5", sa.Float(), nullable=True),
        sa.Column("c6", sa.Float(), nullable=True),
        sa.Column("c7", sa.Float(), nullable=True),
        sa.Column("c8", sa.Float(), nullable=True),
        sa.Column("c9", sa.Float(), nullable=True),
        sa.Column("c10", sa.Float(), nullable=True),
        sa.Column("c11", sa.Float(), nullable=True),
        sa.Column("p1", sa.Float(), nullable=True),
        sa.Column("p2", sa.Float(), nullable=True),
        sa.Column("p3", sa.Float(), nullable=True),
        sa.Column("p4", sa.Float(), nullable=True),
        sa.Column("p5", sa.Float(), nullable=True),
        sa.Column("p6", sa.Float(), nullable=True),
        sa.Column("p7", sa.Float(), nullable=True),
        sa.Column("p8", sa.Float(), nullable=True),
        sa.Column("p9", sa.Float(), nullable=True),
        sa.Column("p10", sa.Float(), nullable=True),
        sa.Column("p11", sa.Float(), nullable=True),
        sa.Column("h1", sa.Float(), nullable=True),
        sa.Column("t1", sa.Float(), nullable=True),
        sa.Column("t", sa.Float(), nullable=True),
        sa.Column("pw", sa.Float(), nullable=True),
        sa.Column("w1", sa.Float(), nullable=True),
        sa.Column("w1_div_t", sa.Float(), nullable=True),
        sa.Column("h1_div_t1", sa.Float(), nullable=True),
        sa.Column("t1_div_t", sa.Float(), nullable=True),
        sa.Column("hr", sa.Integer(), nullable=True),
        sa.Column("pass_num", sa.Integer(), nullable=True),
        sa.Column("all_num", sa.Integer(), nullable=True),
        sa.Column("pass_rate", sa.Float(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["measure_id"],
            ["measure.infos.id"],
            name=op.f("statistics_measure_id_infos_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("statistics_pkey")),
        schema="measure",
    )
    op.create_index(
        op.f("measure_statistics_created_at_idx"),
        "statistics",
        ["created_at"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_statistics_hand_idx"),
        "statistics",
        ["hand"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_statistics_id_idx"),
        "statistics",
        ["id"],
        unique=True,
        schema="measure",
    )
    op.create_index(
        op.f("measure_statistics_measure_id_idx"),
        "statistics",
        ["measure_id"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_statistics_position_idx"),
        "statistics",
        ["position"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_statistics_statistic_idx"),
        "statistics",
        ["statistic"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_statistics_updated_at_idx"),
        "statistics",
        ["updated_at"],
        unique=False,
        schema="measure",
    )
    op.create_table(
        "tongues",
        sa.Column("measure_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("tongue_color", sa.Integer(), nullable=True),
        sa.Column("tongue_shap", sa.Integer(), nullable=False),
        sa.Column("tongue_status1", sa.Integer(), nullable=False),
        sa.Column("tongue_status2", sa.Integer(), nullable=True),
        sa.Column("tongue_coating_color", sa.Integer(), nullable=True),
        sa.Column("tongue_coating_status", sa.Integer(), nullable=False),
        sa.Column("tongue_coating_bottom", sa.Integer(), nullable=True),
        sa.Column("up_img_uri", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("down_img_uri", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("current_timestamp(0)"),
            nullable=False,
        ),
        sa.Column(
            "id",
            sqlmodel.sql.sqltypes.GUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["measure_id"],
            ["measure.infos.id"],
            name=op.f("tongues_measure_id_infos_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("tongues_pkey")),
        schema="measure",
    )
    op.create_index(
        op.f("measure_tongues_created_at_idx"),
        "tongues",
        ["created_at"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_tongues_id_idx"),
        "tongues",
        ["id"],
        unique=True,
        schema="measure",
    )
    op.create_index(
        op.f("measure_tongues_measure_id_idx"),
        "tongues",
        ["measure_id"],
        unique=False,
        schema="measure",
    )
    op.create_index(
        op.f("measure_tongues_updated_at_idx"),
        "tongues",
        ["updated_at"],
        unique=False,
        schema="measure",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("measure_tongues_updated_at_idx"),
        table_name="tongues",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_tongues_measure_id_idx"),
        table_name="tongues",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_tongues_id_idx"),
        table_name="tongues",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_tongues_created_at_idx"),
        table_name="tongues",
        schema="measure",
    )
    op.drop_table("tongues", schema="measure")
    op.drop_index(
        op.f("measure_statistics_updated_at_idx"),
        table_name="statistics",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_statistics_statistic_idx"),
        table_name="statistics",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_statistics_position_idx"),
        table_name="statistics",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_statistics_measure_id_idx"),
        table_name="statistics",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_statistics_id_idx"),
        table_name="statistics",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_statistics_hand_idx"),
        table_name="statistics",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_statistics_created_at_idx"),
        table_name="statistics",
        schema="measure",
    )
    op.drop_table("statistics", schema="measure")
    op.drop_index(
        op.f("measure_raw_data_updated_at_idx"),
        table_name="raw_data",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_raw_data_measure_id_idx"),
        table_name="raw_data",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_raw_data_id_idx"),
        table_name="raw_data",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_raw_data_created_at_idx"),
        table_name="raw_data",
        schema="measure",
    )
    op.drop_table("raw_data", schema="measure")
    op.drop_index(
        op.f("measure_bcqs_updated_at_idx"),
        table_name="bcqs",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_bcqs_measure_id_idx"),
        table_name="bcqs",
        schema="measure",
    )
    op.drop_index(op.f("measure_bcqs_id_idx"), table_name="bcqs", schema="measure")
    op.drop_index(
        op.f("measure_bcqs_created_at_idx"),
        table_name="bcqs",
        schema="measure",
    )
    op.drop_table("bcqs", schema="measure")
    op.drop_index(
        op.f("measure_infos_updated_at_idx"),
        table_name="infos",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_infos_subject_id_idx"),
        table_name="infos",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_infos_proj_num_idx"),
        table_name="infos",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_infos_org_id_idx"),
        table_name="infos",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_infos_measure_time_idx"),
        table_name="infos",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_infos_measure_operator_idx"),
        table_name="infos",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_infos_is_active_idx"),
        table_name="infos",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_infos_irregular_hr_idx"),
        table_name="infos",
        schema="measure",
    )
    op.drop_index(op.f("measure_infos_id_idx"), table_name="infos", schema="measure")
    op.drop_index(
        op.f("measure_infos_has_tongue_idx"),
        table_name="infos",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_infos_has_memo_idx"),
        table_name="infos",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_infos_has_measure_idx"),
        table_name="infos",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_infos_has_low_pass_rate_idx"),
        table_name="infos",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_infos_has_bcq_idx"),
        table_name="infos",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_infos_file_id_idx"),
        table_name="infos",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_infos_created_at_idx"),
        table_name="infos",
        schema="measure",
    )
    op.drop_index(op.f("measure_infos_bmi_idx"), table_name="infos", schema="measure")
    op.drop_table("infos", schema="measure")
    op.drop_index(
        op.f("app_upload_files_updated_at_idx"),
        table_name="upload_files",
        schema="app",
    )
    op.drop_index(
        op.f("app_upload_files_owner_id_idx"),
        table_name="upload_files",
        schema="app",
    )
    op.drop_index(
        op.f("app_upload_files_name_idx"),
        table_name="upload_files",
        schema="app",
    )
    op.drop_index(
        op.f("app_upload_files_location_idx"),
        table_name="upload_files",
        schema="app",
    )
    op.drop_index(
        op.f("app_upload_files_id_idx"),
        table_name="upload_files",
        schema="app",
    )
    op.drop_index(
        op.f("app_upload_files_created_at_idx"),
        table_name="upload_files",
        schema="app",
    )
    op.drop_table("upload_files", schema="app")
    op.drop_index(
        op.f("app_uploads_updated_at_idx"),
        table_name="uploads",
        schema="app",
    )
    op.drop_index(
        op.f("app_uploads_start_from_idx"),
        table_name="uploads",
        schema="app",
    )
    op.drop_index(op.f("app_uploads_owner_id_idx"), table_name="uploads", schema="app")
    op.drop_index(op.f("app_uploads_id_idx"), table_name="uploads", schema="app")
    op.drop_index(op.f("app_uploads_end_to_idx"), table_name="uploads", schema="app")
    op.drop_index(
        op.f("app_uploads_created_at_idx"),
        table_name="uploads",
        schema="app",
    )
    op.drop_table("uploads", schema="app")
    op.drop_index(
        op.f("app_auth_user_roles_user_id_idx"),
        table_name="auth_user_roles",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_user_roles_role_id_idx"),
        table_name="auth_user_roles",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_user_roles_id_idx"),
        table_name="auth_user_roles",
        schema="app",
    )
    op.drop_table("auth_user_roles", schema="app")
    op.drop_index(
        op.f("app_auth_user_actions_user_id_idx"),
        table_name="auth_user_actions",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_user_actions_id_idx"),
        table_name="auth_user_actions",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_user_actions_action_id_idx"),
        table_name="auth_user_actions",
        schema="app",
    )
    op.drop_table("auth_user_actions", schema="app")
    op.drop_index(
        op.f("app_auth_group_users_user_id_idx"),
        table_name="auth_group_users",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_group_users_id_idx"),
        table_name="auth_group_users",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_group_users_group_id_idx"),
        table_name="auth_group_users",
        schema="app",
    )
    op.drop_table("auth_group_users", schema="app")
    op.drop_index(
        op.f("app_auth_users_username_idx"),
        table_name="auth_users",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_users_updated_at_idx"),
        table_name="auth_users",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_users_org_id_idx"),
        table_name="auth_users",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_users_is_superuser_idx"),
        table_name="auth_users",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_users_is_active_idx"),
        table_name="auth_users",
        schema="app",
    )
    op.drop_index(op.f("app_auth_users_id_idx"), table_name="auth_users", schema="app")
    op.drop_index(
        op.f("app_auth_users_email_idx"),
        table_name="auth_users",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_users_created_at_idx"),
        table_name="auth_users",
        schema="app",
    )
    op.drop_table("auth_users", schema="app")
    op.drop_index(
        op.f("app_auth_role_actions_role_id_idx"),
        table_name="auth_role_actions",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_role_actions_id_idx"),
        table_name="auth_role_actions",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_role_actions_action_id_idx"),
        table_name="auth_role_actions",
        schema="app",
    )
    op.drop_table("auth_role_actions", schema="app")
    op.drop_index(
        op.f("app_auth_group_roles_role_id_idx"),
        table_name="auth_group_roles",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_group_roles_id_idx"),
        table_name="auth_group_roles",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_group_roles_group_id_idx"),
        table_name="auth_group_roles",
        schema="app",
    )
    op.drop_table("auth_group_roles", schema="app")
    op.drop_index(
        op.f("measure_subjects_updated_at_idx"),
        table_name="subjects",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_subjects_sid_idx"),
        table_name="subjects",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_subjects_sex_idx"),
        table_name="subjects",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_subjects_name_idx"),
        table_name="subjects",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_subjects_memo_idx"),
        table_name="subjects",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_subjects_is_active_idx"),
        table_name="subjects",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_subjects_id_idx"),
        table_name="subjects",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_subjects_created_at_idx"),
        table_name="subjects",
        schema="measure",
    )
    op.drop_index(
        op.f("measure_subjects_birth_date_idx"),
        table_name="subjects",
        schema="measure",
    )
    op.drop_table("subjects", schema="measure")
    op.drop_index(
        op.f("app_subscriptions_updated_at_idx"),
        table_name="subscriptions",
        schema="app",
    )
    op.drop_index(
        op.f("app_subscriptions_name_idx"),
        table_name="subscriptions",
        schema="app",
    )
    op.drop_index(
        op.f("app_subscriptions_id_idx"),
        table_name="subscriptions",
        schema="app",
    )
    op.drop_index(
        op.f("app_subscriptions_created_at_idx"),
        table_name="subscriptions",
        schema="app",
    )
    op.drop_table("subscriptions", schema="app")
    op.drop_index(
        op.f("app_auth_roles_updated_at_idx"),
        table_name="auth_roles",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_roles_name_idx"),
        table_name="auth_roles",
        schema="app",
    )
    op.drop_index(op.f("app_auth_roles_id_idx"), table_name="auth_roles", schema="app")
    op.drop_index(
        op.f("app_auth_roles_created_at_idx"),
        table_name="auth_roles",
        schema="app",
    )
    op.drop_table("auth_roles", schema="app")
    op.drop_index(
        op.f("app_auth_orgs_updated_at_idx"),
        table_name="auth_orgs",
        schema="app",
    )
    op.drop_index(op.f("app_auth_orgs_name_idx"), table_name="auth_orgs", schema="app")
    op.drop_index(op.f("app_auth_orgs_id_idx"), table_name="auth_orgs", schema="app")
    op.drop_index(
        op.f("app_auth_orgs_created_at_idx"),
        table_name="auth_orgs",
        schema="app",
    )
    op.drop_table("auth_orgs", schema="app")
    op.drop_index(
        op.f("app_auth_groups_updated_at_idx"),
        table_name="auth_groups",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_groups_name_idx"),
        table_name="auth_groups",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_groups_id_idx"),
        table_name="auth_groups",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_groups_created_at_idx"),
        table_name="auth_groups",
        schema="app",
    )
    op.drop_table("auth_groups", schema="app")
    op.drop_index(
        op.f("app_auth_actions_updated_at_idx"),
        table_name="auth_actions",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_actions_name_idx"),
        table_name="auth_actions",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_actions_id_idx"),
        table_name="auth_actions",
        schema="app",
    )
    op.drop_index(
        op.f("app_auth_actions_created_at_idx"),
        table_name="auth_actions",
        schema="app",
    )
    op.drop_table("auth_actions", schema="app")
    # ### end Alembic commands ###
