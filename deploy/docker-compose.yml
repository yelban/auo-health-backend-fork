version: '3.9'

services:
  api:
    build:
      context: .
      dockerfile: ./deploy/Dockerfile
    image: auo_project:${AUO_PROJECT_VERSION:-latest}
    restart: always
    env_file:
    - .env
    labels:
      # Enables traefik for this container.
    - traefik.enable=true
    - traefik.http.routers.auo_project.rule=Host(`${AUO_PROJECT_TRAEFIK_HOST:-auo_project.localhost}`)
    - traefik.http.routers.auo_project.entrypoints=http
    - traefik.http.routers.auo_project.service=auo_project
    - traefik.http.services.auo_project.loadbalancer.server.port=${AUO_PROJECT_PORT:-8000}
    networks:
    - default
    - traefik-shared
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    logging:
      options:
        max-size: "1000m"
        max-file: "5"
    healthcheck:
      test: curl --fail http://localhost:8000/api/v1/monitoring/health || exit 1
      interval: 1s
      timeout: 2s
      retries: 10

  db:
    image: postgres:13.6-bullseye
    hostname: auo_project-db
    environment:
      POSTGRES_PASSWORD: "auo_project"
      POSTGRES_USER: "auo_project"
      POSTGRES_DB: "auo_project"
    volumes:
    - auo_project-db-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: pg_isready -U auo_project
      interval: 2s
      timeout: 3s
      retries: 40

  redis:
    image: bitnami/redis:6.2.5
    hostname: "auo_project-redis"
    restart: always
    environment:
      ALLOW_EMPTY_PASSWORD: "yes"
    healthcheck:
      test: redis-cli ping
      interval: 1s
      timeout: 3s
      retries: 50

  tusd:
    image: tusproject/tusd:v1.10.1
    restart: always
    command: -base-path /files/ -behind-proxy -azure-blob-access-tier hot -azure-storage upload -azure-object-prefix tusd -hooks-enabled-events post-create,post-finish,post-terminate --hooks-http http://${BACKEND_HOST}:${BACKEND_PORT}/api/v1/hooks/tusd --hooks-http-retry 5 --hooks-http-backoff 2
    env_file:
    - .env

  rmq:
    image: rabbitmq:3.9.16-alpine
    hostname: "auo-rmq"
    restart: always
    env_file:
    - .env
    healthcheck:
      test: rabbitmq-diagnostics check_running -q
      interval: 3s
      timeout: 3s
      retries: 50

  celeryworker:
    build:
      context: .
      dockerfile: ./deploy/Dockerfile
    image: auo_project:${AUO_PROJECT_VERSION:-latest}
    depends_on:
    - db
    - rmq
    env_file:
    - .env
    command: /app/src/auo_project/worker-start.sh
    logging:
      options:
        max-size: "1000m"
        max-file: "5"

  celerybeatworker:
    build:
      context: .
      dockerfile: ./deploy/Dockerfile
    image: auo_project:${AUO_PROJECT_VERSION:-latest}
    depends_on:
    - db
    - rmq
    env_file:
    - .env
    command: /app/src/auo_project/beat-worker-start.sh
    logging:
      options:
        max-size: "1000m"
        max-file: "5"

volumes:
  auo_project-db-data:
    name: auo_project-db-data
  netdataconfig:
  netdatalib:
  netdatacache:

networks:
  # Network for traefik.
  traefik-shared:
    name: traefik-shared
